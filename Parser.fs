// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"

  open AST

# 10 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | COLON
  | LBRACE
  | RBRACE
  | EOF
  | ID of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_COLON
    | TOKEN_LBRACE
    | TOKEN_RBRACE
    | TOKEN_EOF
    | TOKEN_ID
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startStmt
    | NONTERM_Stmt
    | NONTERM_LabeledStmt
    | NONTERM_CompoundStmt
    | NONTERM_StmtList

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | COLON  -> 0 
  | LBRACE  -> 1 
  | RBRACE  -> 2 
  | EOF  -> 3 
  | ID _ -> 4 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_COLON 
  | 1 -> TOKEN_LBRACE 
  | 2 -> TOKEN_RBRACE 
  | 3 -> TOKEN_EOF 
  | 4 -> TOKEN_ID 
  | 7 -> TOKEN_end_of_input
  | 5 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startStmt 
    | 1 -> NONTERM_Stmt 
    | 2 -> NONTERM_Stmt 
    | 3 -> NONTERM_LabeledStmt 
    | 4 -> NONTERM_CompoundStmt 
    | 5 -> NONTERM_CompoundStmt 
    | 6 -> NONTERM_StmtList 
    | 7 -> NONTERM_StmtList 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 7 
let _fsyacc_tagOfErrorTerminal = 5

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | COLON  -> "COLON" 
  | LBRACE  -> "LBRACE" 
  | RBRACE  -> "RBRACE" 
  | EOF  -> "EOF" 
  | ID _ -> "ID" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | COLON  -> (null : System.Object) 
  | LBRACE  -> (null : System.Object) 
  | RBRACE  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us;65535us;3us;65535us;0us;1us;6us;10us;8us;11us;3us;65535us;0us;2us;6us;2us;8us;2us;3us;65535us;0us;3us;6us;3us;8us;3us;1us;65535us;6us;8us;|]
let _fsyacc_sparseGotoTableRowOffsets = [|0us;1us;5us;9us;13us;|]
let _fsyacc_stateToProdIdxsTableElements = [| 1us;0us;1us;0us;1us;1us;1us;2us;1us;3us;1us;3us;2us;4us;5us;1us;4us;2us;5us;7us;1us;5us;1us;6us;1us;7us;|]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us;2us;4us;6us;8us;10us;12us;15us;17us;20us;22us;24us;|]
let _fsyacc_action_rows = 12
let _fsyacc_actionTableElements = [|2us;32768us;1us;6us;4us;4us;0us;49152us;0us;16385us;0us;16386us;1us;32768us;0us;5us;0us;16387us;3us;32768us;1us;6us;2us;7us;4us;4us;0us;16388us;3us;32768us;1us;6us;2us;9us;4us;4us;0us;16389us;0us;16390us;0us;16391us;|]
let _fsyacc_actionTableRowOffsets = [|0us;3us;4us;5us;6us;8us;9us;13us;14us;18us;19us;20us;|]
let _fsyacc_reductionSymbolCounts = [|1us;1us;1us;2us;2us;3us;1us;2us;|]
let _fsyacc_productionToNonTerminalTable = [|0us;1us;1us;2us;3us;3us;4us;4us;|]
let _fsyacc_immediateActions = [|65535us;49152us;16385us;16386us;65535us;16387us;65535us;16388us;65535us;16389us;16390us;16391us;|]
let _fsyacc_reductions = lazy [|
# 100 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Stmt in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startStmt));
# 109 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_LabeledStmt in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 12 "Parser.fsy"
                                         _1 
                   )
# 12 "Parser.fsy"
                 : Stmt));
# 120 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_CompoundStmt in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 13 "Parser.fsy"
                                          _1 
                   )
# 13 "Parser.fsy"
                 : Stmt));
# 131 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 15 "Parser.fsy"
                                             LabeledStmt(_1) 
                   )
# 15 "Parser.fsy"
                 : 'gentype_LabeledStmt));
# 142 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 17 "Parser.fsy"
                                                   CompoundStmt([]) 
                   )
# 17 "Parser.fsy"
                 : 'gentype_CompoundStmt));
# 152 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_StmtList in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 18 "Parser.fsy"
                                                            CompoundStmt(_2) 
                   )
# 18 "Parser.fsy"
                 : 'gentype_CompoundStmt));
# 163 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Stmt in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 20 "Parser.fsy"
                                      [_1] 
                   )
# 20 "Parser.fsy"
                 : 'gentype_StmtList));
# 174 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_StmtList in
            let _2 = parseState.GetInput(2) :?> Stmt in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 21 "Parser.fsy"
                                               _1 @ [_2] 
                   )
# 21 "Parser.fsy"
                 : 'gentype_StmtList));
|]
# 187 "Parser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions = _fsyacc_reductions.Value;
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 8;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let Stmt lexer lexbuf : Stmt =
    engine lexer lexbuf 0 :?> _
